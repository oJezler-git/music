const backgrounds={"deep-work":"bg-deep-work",creativity:"bg-creativity",learning:"bg-learning",};const activityLabels={"deep-work":"25 MINUTES OF WORK",creativity:"25 MINUTES OF CREATIVITY",learning:"25 MINUTES OF LEARNING",};const playlistTitles={"deep-work":"Deep Work Playlist",creativity:"Creativity Playlist",learning:"Learning Playlist",};let currentActivity="deep-work";let isPlaying=!1;let timeLeft=25*60;let timerInterval;let currentTracks=[];let currentTrackIndex=-1;let isSelectingTrack=!1;let audioContext=null;let timerMode="interval";let currentTimerMode="interval";let isTimerRunning=!1;let isWorkPhase=!0;let pendingTimerModeChange=null;let fadeInterval;let originalVolume=1;let isFading=!1;let globalVolume=parseFloat(localStorage.getItem("playerVolume"))||1;let timerEndSound=new Audio("../sounds/workintervalend.wav");let breakEndSound=new Audio("../sounds/breakintervalend.wav");timerEndSound.volume=globalVolume;breakEndSound.volume=globalVolume;timerEndSound.preload="auto";breakEndSound.preload="auto";const dropdownBtn=document.getElementById("dropdown-btn");const dropdownContent=document.getElementById("dropdown-content");const currentIcon=document.getElementById("current-icon");const currentActivityEl=document.getElementById("current-activity");const timerLabel=document.getElementById("timer-label");const timerDisplay=document.getElementById("timer-display");const intervalBtn=document.getElementById("interval-btn");const bottomPlayer=document.getElementById("bottom-player");const playPauseBtn=document.getElementById("play-pause-btn");const prevBtn=document.getElementById("prev-btn");const nextBtn=document.getElementById("next-btn");const volumeBtn=document.getElementById("volume-btn");const volumeSlider=document.getElementById("volume-slider");const volumeRange=document.getElementById("volume-range");const progressBar=document.getElementById("progress-bar");const progressRange=document.getElementById("progress-range");const progress=document.getElementById("progress");const tracksBtn=document.getElementById("tracks-btn");const trackListOverlay=document.getElementById("track-list-overlay");const closeTracksBtn=document.getElementById("close-tracks-btn");const trackList=document.getElementById("track-list");const playlistTitle=document.getElementById("playlist-title");const trackTitle=document.getElementById("track-title");const audioPlayer=document.getElementById("audio-player");const timerModeOverlay=document.getElementById("timer-mode-overlay");const closeTimerBtn=document.getElementById("close-timer-btn");const confirmTimerBtn=document.getElementById("confirm-timer-btn");const timerModeOptions=document.querySelectorAll(".timer-mode-option");const timerMinutesInput=document.getElementById("timer-minutes");const workMinutesInput=document.getElementById("work-minutes");const breakMinutesInput=document.getElementById("break-minutes");const warningModal=document.getElementById("warning-modal");const cancelWarningBtn=document.getElementById("cancel-warning-btn");const confirmWarningBtn=document.getElementById("confirm-warning-btn");const timeOptionBtns=document.querySelectorAll(".time-option-btn");const workTimeColumn=document.querySelectorAll(".time-option-column")[0];const breakTimeColumn=document.querySelectorAll(".time-option-column")[1];const timerSettings=document.getElementById("timer-settings");const body=document.body;const savedVolume=localStorage.getItem("playerVolume")||"1";audioPlayer.volume=parseFloat(savedVolume);volumeRange.value=savedVolume;volumeBtn.textContent=savedVolume==="0"?"🔇":savedVolume<=0.5?"🔉":"🔊";async function loadTracks(activity){trackList.innerHTML="<div>Loading...</div>";try{const response=await fetch(`../songs/focus/${activity}.json`);const tracks=await response.json();currentTracks=tracks;renderTrackList(tracks);playlistTitle.textContent=playlistTitles[activity]||"Playlist";if(currentTrackIndex!==-1){document.querySelectorAll(".track-item").forEach((item)=>{item.classList.remove("active");if(parseInt(item.dataset.index)===currentTrackIndex){item.classList.add("active")}})}}catch(e){trackList.innerHTML="<div>Error loading tracks</div>";console.error("Error loading tracks:",e)}}
function renderTrackList(tracks){trackList.innerHTML="";tracks.forEach((track,index)=>{const div=document.createElement("div");div.className="track-item";div.textContent=track.name;div.dataset.index=index;div.addEventListener("click",()=>selectTrack(index));trackList.appendChild(div)})}
async function selectTrack(index){if(isSelectingTrack||index<0||index>=currentTracks.length)return;isSelectingTrack=!0;try{currentTrackIndex=index;const track=currentTracks[index];document.querySelectorAll(".track-item").forEach((item)=>{item.classList.remove("active");if(parseInt(item.dataset.index)===index){item.classList.add("active")}});trackTitle.textContent=track.name;bottomPlayer.classList.add("show");if(isPlaying){audioPlayer.src=track.url;await audioPlayer.play();playPauseBtn.textContent="⏸";startTimer()}else{audioPlayer.src=track.url;playPauseBtn.textContent="▶"}
trackListOverlay.classList.remove("show")}catch(error){console.error("Error selecting track:",error)}finally{isSelectingTrack=!1}}
dropdownBtn.addEventListener("click",(e)=>{e.stopPropagation();dropdownContent.classList.toggle("show")});document.addEventListener("click",()=>dropdownContent.classList.remove("show"));document.querySelectorAll(".activity-option").forEach((option)=>{option.addEventListener("click",()=>{const value=option.dataset.value;const icon=option.dataset.icon;const name=option.textContent.trim();document.querySelectorAll(".activity-option").forEach((opt)=>opt.classList.remove("selected"));option.classList.add("selected");currentIcon.textContent=icon;currentActivityEl.textContent=name;timerLabel.textContent=activityLabels[value];Object.values(backgrounds).forEach((bg)=>body.classList.remove(bg));body.classList.add(backgrounds[value]);currentActivity=value;loadTracks(value);dropdownContent.classList.remove("show")})});intervalBtn.addEventListener("click",(e)=>{e.stopPropagation();timerModeOverlay.classList.add("show");timerModeOverlay.style.visibility="visible";timerModeOverlay.style.opacity="1"});function handleTimerModeChange(){timerModeOptions.forEach((opt)=>opt.classList.remove("selected"));this.classList.add("selected");timerMode=this.dataset.mode;document.querySelector(".interval-settings").style.display=timerMode==="interval"?"block":"none";timerSettings.style.display=timerMode==="timer"?"block":"none"}
function handleTimeOptionClick(){const column=this.closest(".time-option-column");column.querySelectorAll(".time-option-btn").forEach((b)=>b.classList.remove("active"));this.classList.add("active");const timeValue=parseInt(this.textContent);if(column===workTimeColumn){workMinutesInput.value=timeValue}else{breakMinutesInput.value=timeValue}}
timerModeOptions.forEach((option)=>{option.addEventListener("click",handleTimerModeChange)});timeOptionBtns.forEach((btn)=>{btn.addEventListener("click",handleTimeOptionClick)});function closeTimerOverlay(){timerModeOverlay.classList.remove("show");timerModeOverlay.style.visibility="hidden";timerModeOverlay.style.opacity="0";document.querySelectorAll(".timer-mode-option").forEach((opt)=>{opt.removeEventListener("click",handleTimerModeChange)});document.querySelectorAll(".time-option-btn").forEach((btn)=>{btn.removeEventListener("click",handleTimeOptionClick)})}
closeTimerBtn.addEventListener("click",closeTimerOverlay);function closeTrackListOverlay(){trackListOverlay.classList.remove("show");trackList.removeEventListener("scroll",updateVisibleTracks);trackList.innerHTML=""}
closeTracksBtn.addEventListener("click",closeTrackListOverlay);timerModeOverlay.addEventListener("click",(e)=>{if(e.target===timerModeOverlay){closeTimerOverlay()}});timerModeOptions.forEach((option)=>{option.addEventListener("click",()=>{timerModeOptions.forEach((opt)=>opt.classList.remove("selected"));option.classList.add("selected");timerMode=option.dataset.mode;document.querySelector(".interval-settings").style.display=timerMode==="interval"?"block":"none";timerSettings.style.display=timerMode==="timer"?"block":"none"})});document.querySelectorAll("#timer-settings .time-option-btn").forEach((btn)=>{btn.addEventListener("click",function(){document.querySelectorAll("#timer-settings .time-option-btn").forEach((b)=>b.classList.remove("active"));this.classList.add("active");timerMinutesInput.value=parseInt(this.textContent)})});timerMinutesInput.addEventListener("change",function(){if(this.value<1)this.value=1;if(this.value>120)this.value=120;document.querySelectorAll("#timer-settings .time-option-btn").forEach((b)=>b.classList.remove("active"))});timeOptionBtns.forEach((btn)=>{btn.addEventListener("click",function(){const column=this.closest(".time-option-column");column.querySelectorAll(".time-option-btn").forEach((b)=>b.classList.remove("active"));this.classList.add("active");const timeValue=parseInt(this.textContent);if(column===workTimeColumn){workMinutesInput.value=timeValue}else{breakMinutesInput.value=timeValue}})});workMinutesInput.addEventListener("change",function(){if(this.value<1)this.value=1;if(this.value>120)this.value=120});breakMinutesInput.addEventListener("change",function(){if(this.value<1)this.value=1;if(this.value>30)this.value=30});confirmTimerBtn.addEventListener("click",()=>{if(isTimerRunning&&currentTimerMode!==timerMode){pendingTimerModeChange=timerMode;warningModal.classList.add("show");return}
pendingTimerModeChange=timerMode;applyTimerModeChange()});function applyTimerModeChange(){closeTimerOverlay();if(timerInterval)clearInterval(timerInterval);currentTimerMode=pendingTimerModeChange||timerMode;isWorkPhase=!0;switch(currentTimerMode){case "infinite":timeLeft=0;timerLabel.textContent="INFINITE PLAY";break;case "timer":const timerMinutes=parseInt(timerMinutesInput.value||25);timeLeft=timerMinutes*60;timerLabel.textContent=`${timerMinutes} MINUTE TIMER`;break;case "interval":const workMinutes=parseInt(workMinutesInput.value)||25;timeLeft=workMinutes*60;timerLabel.textContent=`WORK: ${workMinutes} MINUTES`;break}
updateTimerDisplay();isTimerRunning=!1;updateIntervalButtonText();if(isPlaying){startTimer()}
pendingTimerModeChange=null}
document.addEventListener("DOMContentLoaded",function(){if(!workMinutesInput.value)workMinutesInput.value=25;if(!breakMinutesInput.value)breakMinutesInput.value=5;if(!timerMinutesInput.value)timerMinutesInput.value=25});cancelWarningBtn.addEventListener("click",()=>{warningModal.classList.remove("show");pendingTimerModeChange=currentTimerMode});confirmWarningBtn.addEventListener("click",()=>{warningModal.classList.remove("show");applyTimerModeChange()});warningModal.addEventListener("click",(e)=>{if(e.target===warningModal){warningModal.classList.remove("show");pendingTimerModeChange=null}});function startTimer(){if(!isPlaying)return;if(timerInterval)clearInterval(timerInterval);timerInterval=setInterval(updateTimer,1000);isTimerRunning=!0;updateIntervalButtonText()}
function stopTimer(){clearInterval(timerInterval);timerInterval=null;isTimerRunning=!1;updateIntervalButtonText()}
function updateTimer(){if(!isPlaying){stopTimer();return}
if(currentTimerMode==="infinite"){timeLeft++}else if(currentTimerMode==="timer"||currentTimerMode==="interval"){if(timeLeft>0){timeLeft--;if(currentTimerMode==="interval"&&timeLeft===6&&!isFading){handleTimerCompletion()}}else{return}}
updateTimerDisplay()}
function updateTimerDisplay(){const minutes=Math.floor(Math.abs(timeLeft)/60);const seconds=Math.abs(timeLeft)%60;timerDisplay.textContent=`${minutes}:${seconds
    .toString()
    .padStart(2, "0")}`}
function handleTimerCompletion(){if(currentTimerMode==="interval"){if(isWorkPhase){startAudioTransition(timerEndSound,()=>{const breakMinutes=parseInt(breakMinutesInput.value||10);timeLeft=breakMinutes*60;isWorkPhase=!1;timerLabel.textContent=`BREAK: ${breakMinutes} MINUTES`})}else{startAudioTransition(breakEndSound,()=>{const workMinutes=parseInt(workMinutesInput.value||25);timeLeft=workMinutes*60;isWorkPhase=!0;timerLabel.textContent=`WORK: ${workMinutes} MINUTES`})}}else{timerEndSound.play();stopTimer()}}
function startAudioTransition(transitionSound,completionCallback){console.log("Starting audio transition");originalVolume=audioPlayer.volume;const fadeDuration=6000;const soundPlayTime=3000;const fadeStartTime=Date.now();isFading=!0;if(fadeInterval)clearInterval(fadeInterval);fadeInterval=setInterval(()=>{const elapsed=Date.now()-fadeStartTime;const remaining=fadeDuration-elapsed;if(elapsed<=fadeDuration){const fadeProgress=elapsed/fadeDuration;audioPlayer.volume=originalVolume*(1-fadeProgress)}
if(elapsed>=soundPlayTime&&elapsed<soundPlayTime+100){transitionSound.currentTime=0;transitionSound.play()}
if(elapsed>=fadeDuration){clearInterval(fadeInterval);const fadeBackDuration=3000;const fadeBackStart=Date.now();const fadeBackInterval=setInterval(()=>{const fadeBackElapsed=Date.now()-fadeBackStart;const fadeBackProgress=Math.min(fadeBackElapsed/fadeBackDuration,1);audioPlayer.volume=originalVolume*fadeBackProgress;if(fadeBackProgress>=1){clearInterval(fadeBackInterval);isFading=!1;completionCallback()}},50)}},50)}
function updateIntervalButtonText(){let label;switch(currentTimerMode){case "infinite":label=isTimerRunning?"Change":"Infinite";break;case "timer":label=isTimerRunning?"Change":"Timer";break;case "interval":label=isTimerRunning?"Change":"Pomodoro";break}
intervalBtn.innerHTML=`<span>⏱</span><span>${label}</span>`}
function positionDropdown(){if(window.innerWidth<=400){dropdownContent.style.right="auto";dropdownContent.style.left="16px";dropdownContent.style.width="calc(100% - 32px)"}else{dropdownContent.style.right="0";dropdownContent.style.left="auto";dropdownContent.style.width="auto"}}
window.addEventListener("load",positionDropdown);window.addEventListener("resize",positionDropdown);dropdownBtn.addEventListener("click",function(){setTimeout(positionDropdown,10)});playPauseBtn.addEventListener("click",async()=>{try{if(currentTrackIndex===-1&&currentTracks.length>0){await selectTrack(0);return}
if(audioPlayer.paused){await audioPlayer.play();isPlaying=!0;playPauseBtn.textContent="⏸";startTimer()}else{audioPlayer.pause();isPlaying=!1;playPauseBtn.textContent="▶";stopTimer()}
bottomPlayer.classList.add("show")}catch(error){console.error("Play/Pause failed:",error);trackTitle.textContent=`${
      currentTracks[currentTrackIndex]?.name || "Track"
    } (Error - try again)`}});prevBtn.addEventListener("click",()=>{if(currentTrackIndex>0){stopTimer();selectTrack(currentTrackIndex-1)}});nextBtn.addEventListener("click",()=>{if(currentTrackIndex<currentTracks.length-1){stopTimer();selectTrack(currentTrackIndex+1)}});intervalBtn.addEventListener("click",function(){setTimeout(()=>{timerModeOverlay.scrollTo(0,0)},50)});volumeRange.addEventListener("input",function(){const newVolume=parseFloat(this.value);globalVolume=newVolume;audioPlayer.volume=newVolume;audioPlayer.muted=newVolume===0;timerEndSound.volume=newVolume;breakEndSound.volume=newVolume;volumeSlider.style.setProperty("--volume-percent",newVolume*100);const thumb=volumeSlider.querySelector(".volume-thumb");thumb.style.left=`${newVolume * 100}%`;volumeBtn.textContent=newVolume===0?"🔇":newVolume<=0.5?"🔉":"🔊";localStorage.setItem("playerVolume",newVolume)});const initialVolume=volumeRange.value*100;volumeSlider.style.setProperty("--volume-percent",initialVolume);const thumb=volumeSlider.querySelector(".volume-thumb");thumb.style.left=`${initialVolume}%`;volumeBtn.addEventListener("click",()=>{const isMuted=audioPlayer.muted||globalVolume===0;const newVolume=isMuted?parseFloat(localStorage.getItem("playerVolume"))||0.7:0;globalVolume=newVolume;audioPlayer.volume=newVolume;audioPlayer.muted=newVolume===0;timerEndSound.volume=newVolume;breakEndSound.volume=newVolume;volumeRange.value=newVolume;volumeSlider.style.setProperty("--volume-percent",newVolume*100);const thumb=volumeSlider.querySelector(".volume-thumb");thumb.style.left=`${newVolume * 100}%`;volumeBtn.textContent=newVolume===0?"🔇":newVolume<=0.5?"🔉":"🔊";localStorage.setItem("playerVolume",newVolume)});volumeRange.addEventListener("input",()=>{audioPlayer.volume=volumeRange.value;audioPlayer.muted=volumeRange.value==="0";volumeBtn.textContent=volumeRange.value==="0"?"🔇":volumeRange.value<=0.5?"🔉":"🔊";localStorage.setItem("playerVolume",volumeRange.value)});audioPlayer.addEventListener("timeupdate",()=>{if(audioPlayer.duration){const progressPercent=(audioPlayer.currentTime/audioPlayer.duration)*100;progress.style.width=`${progressPercent}%`;progressRange.value=progressPercent}});progressRange.addEventListener("input",()=>{if(audioPlayer.duration){const newTime=(progressRange.value/100)*audioPlayer.duration;audioPlayer.currentTime=newTime;progress.style.width=`${progressRange.value}%`}});tracksBtn.addEventListener("click",()=>trackListOverlay.classList.add("show"));closeTracksBtn.addEventListener("click",()=>trackListOverlay.classList.remove("show"));audioPlayer.addEventListener("ended",()=>{if(currentTrackIndex<currentTracks.length-1){selectTrack(currentTrackIndex+1)}else{isPlaying=!1;playPauseBtn.textContent="▶";stopTimer()}});async function init(){bottomPlayer.classList.add("show");await loadTracks(currentActivity);if(currentTracks.length>0){currentTrackIndex=0;trackTitle.textContent=currentTracks[0].name;audioPlayer.src=currentTracks[0].url;document.querySelectorAll(".track-item")[0].classList.add("active")}
if(currentTimerMode==="interval"){const workMinutes=parseInt(workMinutesInput.value)||25;timeLeft=workMinutes*60;timerLabel.textContent=`WORK: ${workMinutes} MINUTES`}
updateTimerDisplay();updateIntervalButtonText()}
init()
